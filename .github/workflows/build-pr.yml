name: Build - Clash Bot WebApp

on:
  push:
    branches:
      - 'feature/**'

jobs:
  build-artifact:
    name: "Build Clash Bot Spring Service"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - uses: actions/setup-java@v4.7.0
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.3.0

      - name: Gradle build
        run: |
          CI=true ./gradlew clean build -x test --scan

      - uses: actions/upload-artifact@v4.6.1
        with:
          name: jar
          path: build/libs

  build-image:
    name: "Build Clash Bot Docker Image and publish to ECR"
    needs:
      - build-artifact
    runs-on: ubuntu-latest
    environment:
      name: Feature
    permissions:
      id-token: write
      contents: read
    outputs:
      fullDockerPath: ${{ steps.docker.outputs.fullDockerPath }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5.4.0

      - name: Download built jar
        uses: actions/download-artifact@v4.1.9
        with:
          name: jar
          path: build/libs

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build Docker Image
        id: docker
        run: python CIScripts/build-tag.py

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.docker.outputs.fullDockerPath }}

  deploy-infra:
    name: "Deploy Clash Bot preqrequisite Infrastructure"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: Feature
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Setup Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: '1.23.6'

      - name: Go mod tidy
        working-directory: ClashBot-Pulumi/
        run: go mod tidy

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      - uses: pulumi/actions@v6.1.0
        with:
          command: preview
          stack-name: pre
          work-dir: ClashBot-Pulumi/
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - uses: pulumi/actions@v6.1.0
        with:
          command: up
          stack-name: pre
          work-dir: ClashBot-Pulumi/
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Set output to context
        id: get-task-def
        run: |
          echo "::set-output name="

  deploy-ecs:
    name: "Deploy Clash Bot Docker Image to ECS"
    needs:
      - build-image
      - deploy-infra
    runs-on: ubuntu-latest
    environment:
      name: Feature
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:

          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      - name: Render task def
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.6.2
        with:
          task-definition: harness/task-def.json
          container-name: clash-bot-service
          image: ${{ needs.build-image.outputs.fullDockerPath }}
          task-definition-family: clash-bot-service-round-2
          environment-variables: |
            SPRING_PROFILES_ACTIVE="${{ vars.SPRING_PROFILE }}"
            SERVER_PORT="8080"
            AWS_REGION="${{ vars.AWS_REGION }}"
          secrets: |
            RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}
            MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}
          log-configuration-log-driver: awslogs
          log-configuration-options: |
            awslogs-create-group=true
            awslogs-group=/ecs/clash-bot
            awslogs-region=us-east-1

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.0
        with:
          cluster: main-cluster
          service: clash-bot-service
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true
          wait-for-minutes: 5
          run-task-assign-public-IP: ENABLED
          run-task-launch-type: FARGATE
